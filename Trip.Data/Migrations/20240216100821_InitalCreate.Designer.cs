// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trip.Data;

#nullable disable

namespace Trip.Data.Migrations
{
    [DbContext(typeof(DbContextClass))]
    [Migration("20240216100821_InitalCreate")]
    partial class InitalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("BookingRoomRoom", b =>
                {
                    b.Property<Guid>("BookingRoomId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("TEXT");

                    b.HasKey("BookingRoomId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("BookingRoomRoom");
                });

            modelBuilder.Entity("ExtraRoom", b =>
                {
                    b.Property<Guid>("ExtraId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ExtraId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("ExtraRoom");
                });

            modelBuilder.Entity("Trip.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<float>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Trip.Data.Models.Airplane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasMaxLength(8)
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Airplanes");
                });

            modelBuilder.Entity("Trip.Data.Models.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdressId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("Trip.Data.Models.BookingRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BookingRooms");
                });

            modelBuilder.Entity("Trip.Data.Models.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BookingRoomId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("DossierNumber")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FlightId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookingRoomId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FlightId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("Trip.Data.Models.DossierFlight", b =>
                {
                    b.Property<Guid>("DossierId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("TEXT");

                    b.HasKey("DossierId", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("DossierFlights");
                });

            modelBuilder.Entity("Trip.Data.Models.Extra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFree")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OptionPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OptionName")
                        .IsUnique();

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("Trip.Data.Models.FellowTraveller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("FellowTravellers");
                });

            modelBuilder.Entity("Trip.Data.Models.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Trip.Data.Models.FlightAirplanes", b =>
                {
                    b.Property<Guid>("FlightId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AirplaneId")
                        .HasColumnType("TEXT");

                    b.HasKey("FlightId", "AirplaneId");

                    b.HasIndex("AirplaneId");

                    b.ToTable("FlightAirplanes");
                });

            modelBuilder.Entity("Trip.Data.Models.FlightAirports", b =>
                {
                    b.Property<Guid>("FlightId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AirportId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("FlightId", "AirportId");

                    b.HasIndex("AirportId");

                    b.ToTable("FlightAirports");
                });

            modelBuilder.Entity("Trip.Data.Models.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("Ville")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Trip.Data.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Trip.Data.Models.RoomBookingRoom", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookingRoomId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoomId", "BookingRoomId");

                    b.HasIndex("BookingRoomId");

                    b.ToTable("RoomBookingRooms");
                });

            modelBuilder.Entity("Trip.Data.Models.RoomExtra", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExtraId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoomId", "ExtraId");

                    b.HasIndex("ExtraId");

                    b.ToTable("RoomExtras");
                });

            modelBuilder.Entity("Trip.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Trip.Data.Models.Agent", b =>
                {
                    b.HasBaseType("Trip.Data.Models.User");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Agent");
                });

            modelBuilder.Entity("Trip.Data.Models.Client", b =>
                {
                    b.HasBaseType("Trip.Data.Models.User");

                    b.Property<Guid>("AdresseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasIndex("AdresseId");

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("BookingRoomRoom", b =>
                {
                    b.HasOne("Trip.Data.Models.BookingRoom", null)
                        .WithMany()
                        .HasForeignKey("BookingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trip.Data.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtraRoom", b =>
                {
                    b.HasOne("Trip.Data.Models.Extra", null)
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trip.Data.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trip.Data.Models.Airport", b =>
                {
                    b.HasOne("Trip.Data.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");
                });

            modelBuilder.Entity("Trip.Data.Models.Dossier", b =>
                {
                    b.HasOne("Trip.Data.Models.BookingRoom", "BookingRoom")
                        .WithMany()
                        .HasForeignKey("BookingRoomId");

                    b.HasOne("Trip.Data.Models.Client", "Client")
                        .WithMany("Dossiers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trip.Data.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId");

                    b.Navigation("BookingRoom");

                    b.Navigation("Client");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Trip.Data.Models.DossierFlight", b =>
                {
                    b.HasOne("Trip.Data.Models.Dossier", "dossier")
                        .WithMany("dossierFlights")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trip.Data.Models.Flight", "flight")
                        .WithMany("dossierFlights")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dossier");

                    b.Navigation("flight");
                });

            modelBuilder.Entity("Trip.Data.Models.FellowTraveller", b =>
                {
                    b.HasOne("Trip.Data.Models.Client", "client")
                        .WithMany("FellowTravellers")
                        .HasForeignKey("ClientId");

                    b.Navigation("client");
                });

            modelBuilder.Entity("Trip.Data.Models.FlightAirplanes", b =>
                {
                    b.HasOne("Trip.Data.Models.Airplane", "airplane")
                        .WithMany("flightAirplanes")
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trip.Data.Models.Flight", "flight")
                        .WithMany("flightAirplanes")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("airplane");

                    b.Navigation("flight");
                });

            modelBuilder.Entity("Trip.Data.Models.FlightAirports", b =>
                {
                    b.HasOne("Trip.Data.Models.Airport", "airport")
                        .WithMany("flightAirports")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trip.Data.Models.Flight", "flight")
                        .WithMany("flightAirports")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("airport");

                    b.Navigation("flight");
                });

            modelBuilder.Entity("Trip.Data.Models.Hotel", b =>
                {
                    b.HasOne("Trip.Data.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");
                });

            modelBuilder.Entity("Trip.Data.Models.Room", b =>
                {
                    b.HasOne("Trip.Data.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Trip.Data.Models.RoomBookingRoom", b =>
                {
                    b.HasOne("Trip.Data.Models.BookingRoom", "bookingRoom")
                        .WithMany()
                        .HasForeignKey("BookingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trip.Data.Models.Room", "room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bookingRoom");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Trip.Data.Models.RoomExtra", b =>
                {
                    b.HasOne("Trip.Data.Models.Extra", "extra")
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trip.Data.Models.Room", "room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("extra");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Trip.Data.Models.Client", b =>
                {
                    b.HasOne("Trip.Data.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");
                });

            modelBuilder.Entity("Trip.Data.Models.Airplane", b =>
                {
                    b.Navigation("flightAirplanes");
                });

            modelBuilder.Entity("Trip.Data.Models.Airport", b =>
                {
                    b.Navigation("flightAirports");
                });

            modelBuilder.Entity("Trip.Data.Models.Dossier", b =>
                {
                    b.Navigation("dossierFlights");
                });

            modelBuilder.Entity("Trip.Data.Models.Flight", b =>
                {
                    b.Navigation("dossierFlights");

                    b.Navigation("flightAirplanes");

                    b.Navigation("flightAirports");
                });

            modelBuilder.Entity("Trip.Data.Models.Hotel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Trip.Data.Models.Client", b =>
                {
                    b.Navigation("Dossiers");

                    b.Navigation("FellowTravellers");
                });
#pragma warning restore 612, 618
        }
    }
}
